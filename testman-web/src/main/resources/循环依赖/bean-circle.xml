<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd">

    <!--下面会造成循环依赖问题-->
    <!--    <bean id="a" class="com.liu.springtest.spring循环依赖.A">
            <constructor-arg ref="b"/>
        </bean>
        <bean id="b" class="com.liu.springtest.spring循环依赖.B">
            <constructor-arg ref="c"/>
        </bean>
        <bean id="c" class="com.liu.springtest.spring循环依赖.C">
            <constructor-arg ref="a"/>
        </bean>-->


    <!--
    单例模式下，利用setter方法注入解决循环依赖问题
    原因：
        先利用无参构造方法创建bean，然后利用property进行赋值就可以
        创建A成功，利用property将一个创建中的B放入缓存；
        创建B的时候，因为spring中有一个正在创建中的b，所以直接将B赋给这个创建中的b，然后利用property将一个创建中的C放入缓存；
        创建C的时候，因为spring中有一个正在创建中的c，所以直接将C赋给这个创建中的c，而此时A已经创建成功，所以将属性a直接指向创建成功的a即可

        非单例的就会报错，因为非单例的spring不会缓存创建的bean，所以肯定会报循环依赖错误
    -->
    <bean id="a1" class="com.liu.springtest.spring循环依赖.A">
        <property name="b" ref="b1"/>
    </bean>
    <bean id="b1" class="com.liu.springtest.spring循环依赖.B">
        <property name="c" ref="c1"/>
    </bean>
    <bean id="c1" class="com.liu.springtest.spring循环依赖.C">
        <property name="a" ref="a1"/>
    </bean>

</beans>